import os
import pandas as pd
import numpy as np
from sklearn.svm import SVR
from sklearn.model_selection import RandomizedSearchCV, train_test_split
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.metrics import mean_squared_error
from scipy.stats import expon, reciprocal

def load_housing_data(housing_path='/kaggle/input/housing/housing.csv'):
    return pd.read_csv(housing_path)

# Load data
housing = load_housing_data()


X = housing.drop('median_house_value', axis=1)  
y = housing['median_house_value']  


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


numeric_features = X_train.select_dtypes(include=[np.number]).columns.tolist()
numeric_transformer = Pipeline([
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', StandardScaler())
])

preprocessor = ColumnTransformer([
    ('num', numeric_transformer, numeric_features)
])


X_train_prepared = preprocessor.fit_transform(X_train)
X_test_prepared = preprocessor.transform(X_test)

# Define the parameter distributions for RandomizedSearchCV
param_distribs = {
    'kernel': ['linear', 'rbf'],
    'C': reciprocal(20, 200000),
    'gamma': expon(scale=1.0)
}

# Perform RandomizedSearchCV with SVR
svm_regressor = SVR()
rnd_search = RandomizedSearchCV(svm_regressor, param_distributions=param_distribs,
                                n_iter=50, cv=5, scoring='neg_mean_squared_error',
                                verbose=2, random_state=42)
rnd_search.fit(X_train_prepared, y_train)

best_svr_model = rnd_search.best_estimator_
print("Best SVR parameters from RandomizedSearchCV:", rnd_search.best_params_)

# Evaluate the best model
y_pred = best_svr_model.predict(X_test_prepared)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
print("Root Mean Squared Error (RMSE) of the best SVR from RandomizedSearchCV:", rmse)
