import matplotlib.pyplot as plt
import numpy as np

# Data for Bagging Adaboost
data_bagging_adaboost = {
    "Mean Squared Error": [0.026950044, 0.039639473, 0.053285198, 0.002272342, 0.073769469, 0.033639383],
    "R^2": [0.972183403, 0.96089113, 0.919809663, 0.873024643, 0.957135096, 0.965185482],
    "Mean Absolute Error": [0.087721508, 0.093921835, 0.07088961, 0.020121769, 0.101360529, 0.090330143],
    "Variance Score": [0.979144692, 0.969498368, 0.947011089, 0.917923038, 0.970045234, 0.972855938],
    "RMSE": [0.123271481, 0.121966108, 0.104818836, 0.030571359, 0.159390121, 0.121308354]
}

# Data for Bagging SVM
data_bagging_svm = {
    "Mean Squared Error": [0.171587358, 0.220683156, 0.111166604, 0.019814315, 0.27445778, 0.154546043],
    "R^2": [0.697024252, 0.806129476, 0.561544818, -4.52005455, 0.727958725, 0.741258173],
    "Mean Absolute Error": [0.259561229, 0.248426415, 0.176182001, 0.08854974, 0.252833884, 0.23228632],
    "Variance Score": [0.82495369, 0.858748371, 0.720218877, -1.794981682, 0.796461439, 0.842731559],
    "RMSE": [0.356636596, 0.335158047, 0.223158688, 0.116681271, 0.376388997, 0.29551453]
}

# Data for Stacked Model
data_stacked_model = {
    "Mean Squared Error": [0.025319754, 0.044380733, 0.04858145, 0.016131277, 0.047451103, 0.034632317],
    "R^2": [0.956714802, 0.955838155, 0.865692736, -0.158690527, 0.962093052, 0.950754448],
    "Mean Absolute Error": [0.110629973, 0.112139651, 0.085048161, 0.064745716, 0.112007711, 0.104313506],
    "Variance Score": [0.97663808, 0.961432929, 0.922223564, 0.464023018, 0.973246451, 0.97006017],
    "RMSE": [0.140015309, 0.141632608, 0.114969095, 0.093179456, 0.153421021, 0.130972093]
}

# Calculate averages for Bagging Adaboost
averages_bagging_adaboost = {}
for metric, values in data_bagging_adaboost.items():
    average = np.mean(values)
    averages_bagging_adaboost[metric] = average

# Calculate averages for Bagging SVM
averages_bagging_svm = {}
for metric, values in data_bagging_svm.items():
    average = np.mean(values)
    averages_bagging_svm[metric] = average

# Calculate averages for Stacked Model
averages_stacked_model = {}
for metric, values in data_stacked_model.items():
    average = np.mean(values)
    averages_stacked_model[metric] = average

# Aggregate averages from Bagging Adaboost and Bagging SVM using weighted average
weights = [0.5, 0.5]
aggregate_averages = {}
for metric in averages_bagging_adaboost.keys():
    aggregate_average = (weights[0] * averages_bagging_adaboost[metric] + 
                         weights[1] * averages_bagging_svm[metric])
    aggregate_averages[metric] = aggregate_average

# Metrics and Models
metrics = list(data_bagging_adaboost.keys())
models = ['Bagging Adaboost', 'Bagging SVM', 'Stacked Model', 'Aggregated (Adaboost + SVM)']

# Values for each metric and model
values = np.array([[averages_bagging_adaboost[metric] for metric in metrics],
                   [averages_bagging_svm[metric] for metric in metrics],
                   [averages_stacked_model[metric] for metric in metrics],
                   [aggregate_averages[metric] for metric in metrics]])

# Plotting the bar graph
bar_width = 0.2
index = np.arange(len(metrics))

fig, ax = plt.subplots(figsize=(12, 8))
bar1 = ax.bar(index - bar_width * 1.5, values[0], bar_width, label='Bagging Adaboost')
bar2 = ax.bar(index - bar_width * 0.5, values[1], bar_width, label='Bagging SVM')
bar3 = ax.bar(index + bar_width * 0.5, values[2], bar_width, label='Stacked Model')
bar4 = ax.bar(index + bar_width * 1.5, values[3], bar_width, label='Aggregated (Adaboost + SVM)')

ax.set_xlabel('Metrics')
ax.set_ylabel('Average Value')
ax.set_title('Comparison of Performance Metrics')
ax.set_xticks(index)
ax.set_xticklabels(metrics)
ax.legend()

plt.tight_layout()
plt.show()
